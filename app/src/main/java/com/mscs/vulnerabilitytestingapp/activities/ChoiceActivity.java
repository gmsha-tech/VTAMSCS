package com.mscs.vulnerabilitytestingapp.activities;

import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;

import androidx.activity.result.ActivityResult;
import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.app.AppCompatDelegate;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.Manifest;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.provider.Settings;
import android.util.Log;
import android.view.Gravity;
import android.view.MenuItem;
import android.view.View;
import android.webkit.MimeTypeMap;
import android.widget.Toast;

import com.androidnetworking.AndroidNetworking;
import com.androidnetworking.common.Priority;
import com.androidnetworking.error.ANError;
import com.androidnetworking.interfaces.JSONObjectRequestListener;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.snackbar.Snackbar;
import com.mscs.vulnerabilitytestingapp.AboutActivity;
import com.mscs.vulnerabilitytestingapp.Constants;
import com.mscs.vulnerabilitytestingapp.R;
import com.mscs.vulnerabilitytestingapp.helperclasses.Preferences;
import com.mscs.vulnerabilitytestingapp.helperclasses.RecentAppsAdapter;
import com.mscs.vulnerabilitytestingapp.helperclasses.RecentAppsHelper;
import com.mscs.vulnerabilitytestingapp.helperclasses.SwipeToDeleteCallback;
import com.mscs.vulnerabilitytestingapp.helperclasses.ThemeConstant;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;

public class ChoiceActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {

    DrawerLayout layout;
    private ActivityResultLauncher<Intent> activityResultLauncher;
    NavigationView navigationView;

    ArrayList<RecentAppsHelper> mRecentAppsArray = new ArrayList<>();

    RecyclerView mRecentAppsRecyclerview;

    CoordinatorLayout mainLayoutRecyclerview;
    RecentAppsAdapter adapter;

    public static Context mContext;

    int counter, totalApps, themeNo, flag, position, count = 0;
    Preferences preferences;
    String color, fileName;
    boolean dark;

    ThemeConstant themeConstant;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_choice);

        layout = findViewById(R.id.mainLayout);
        navigationView = findViewById(R.id.nav_view);
        mRecentAppsRecyclerview = findViewById(R.id.recentApps);
        mainLayoutRecyclerview = findViewById(R.id.coordinatorLayout);
        preferences = new Preferences(ChoiceActivity.this);
        color = preferences.getCircleColor();
        dark = preferences.getMode();
        themeNo = preferences.getThemeNo();
        themeConstant = new ThemeConstant(themeNo);
        if (themeNo == 0) {
            setTheme(R.style.AppTheme);
        } else {
            setTheme(themeConstant.themeChooser());
        }
        //Add these line of code in onCreate Method
        activityResultLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), new ActivityResultCallback<ActivityResult>() {
            @Override
            public void onActivityResult( ActivityResult result ) {

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                    if (Environment.isExternalStorageManager())
                        Log.e("permissions", "we have permission ");
                    else
                        Log.e("permissions", "you've denied permission ");
                } else {
                    Log.e("permissions", "you've denied permission ");
                }
            }
        });

        if (checkPermission()) {
            Log.e("permissions", "we have permission ");
        } else {
            requestPermission(); // Request Permission
        }
        if(mContext==null)
            mContext = ChoiceActivity.this;
        AndroidNetworking.initialize(mContext);

        AndroidNetworking.get(Constants.HOST_IP + Constants.SCANS)
                .addHeaders("Authorization", Constants.MOBSF_AUTHORIZATION)
                .setPriority(Priority.HIGH)
                .build().getAsJSONObject(new JSONObjectRequestListener() {
                    @Override
                    public void onResponse(JSONObject response) {

                        Log.e("API", "onResponse: "+response.toString() );
                        try {
                            JSONArray array = response.getJSONArray("content");


                            for (int i = 0; i < array.length(); i++) {
                                JSONObject explrObject = array.getJSONObject(i);

                                // Generate App Url
                                String appUrl = Constants.HOST_IP +  "/" +
                                        explrObject.getString("ANALYZER") + "/?name="
                                        + explrObject.getString("FILE_NAME") + "&checksum="
                                        + explrObject.getString("MD5") + "&type=" + explrObject.getString("SCAN_TYPE");

                                // Generate PDF URL
                                String pdfUrl = Constants.HOST_IP +"/pdf/?md5=" + explrObject.getString("MD5");
                                mRecentAppsArray.add(new RecentAppsHelper(
                                        explrObject.getString("FILE_NAME"),
                                        explrObject.getString("APP_NAME"),
                                        appUrl,
                                        explrObject.getString("PACKAGE_NAME"),
                                        explrObject.getString("VERSION_NAME"),
                                        explrObject.getString("TIMESTAMP"),
                                        pdfUrl,
                                        explrObject.getString("MD5")

                                ));
                                Log.e("LIST", "onCreate: "+ mRecentAppsArray.get(i).getPdfUrl());
                            }


                        } catch (JSONException e) {
                            throw new RuntimeException(e);
                        }
                    }

                    @Override
                    public void onError(ANError anError) {
                        Log.e("API", "onError: " + anError.getErrorBody());
                    }
                });

        // Navigation Drawer Bar

      new Handler().postDelayed(new Runnable() {
          @Override
          public void run() {
              runOnUiThread(new Runnable() {
                  @Override
                  public void run() {
                      LinearLayoutManager manager =new LinearLayoutManager(ChoiceActivity.this, RecyclerView.VERTICAL, false);
                      adapter = new RecentAppsAdapter(mRecentAppsArray, ChoiceActivity.this,ChoiceActivity.this);
                      mRecentAppsRecyclerview.setLayoutManager(manager);
                      mRecentAppsRecyclerview.setAdapter(adapter);
                      enableSwipeToDeleteAndUndo();
                      adapter.notifyDataSetChanged();
                  }
              });
          }
      }, 2000);

        navigationView.bringToFront();
        ActionBarDrawerToggle toggle = new
                ActionBarDrawerToggle(this, layout, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        layout.addDrawerListener(toggle);
        toggle.syncState();
        navigationView.setNavigationItemSelectedListener(this);
    }



    public void bevigilClickedButton(View view) {

        startActivity(new Intent(getApplicationContext(), BevigilActivity.class));
    }

    // Request code for selecting a PDF document.
    private static final int REQUEST_CODE = 2;

    private void getApk() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("application/vnd.android.package-archive");


        startActivityForResult(intent, REQUEST_CODE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_CODE && resultCode == RESULT_OK) {
            Uri uri = data.getData();
            if (uri != null) {
                // Handle the selected file URI (e.g., display file name, copy to another location, etc.)
                // Note: You may need to handle permission requests if targeting Android 10 (API level 29) or higher


                String fileExtension = MimeTypeMap.getFileExtensionFromUrl(uri.toString());
                if ("apk".equalsIgnoreCase(fileExtension)) {
                    // Proceed with further processing for .apk file
                    Toast.makeText(this, uri.getPath(), Toast.LENGTH_SHORT).show();
                } else {
                    // Show error message or take appropriate action for invalid file type
                    Toast.makeText(this, "Not APK", Toast.LENGTH_SHORT).show();
                }

            }
        }
    }

    @Override
    public void onBackPressed() {
        if (layout.isDrawerOpen(GravityCompat.START)) {
            layout.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case R.id.bevigil:
                startActivity(new Intent(getApplicationContext(), BevigilActivity.class));
                break;
            case R.id.about:
                Intent intent = new Intent(ChoiceActivity.this, AboutActivity.class);
                startActivity(intent);

                break;
            case R.id.settings:
                Intent intentSetting = new Intent(ChoiceActivity.this, SettingsActivity.class);
                startActivity(intentSetting);
                break;

        }
        layout.closeDrawer(GravityCompat.START);
        return true;
    }

    public void choose1(View view) {
        startActivity(new Intent(getApplicationContext(), MainActivity.class));
    }

    public void choose2(View view) {
        getApk();
    }

    private boolean checkPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            return Environment.isExternalStorageManager();
        } else {
            int readCheck = ContextCompat.checkSelfPermission(getApplicationContext(), READ_EXTERNAL_STORAGE);
            int writeCheck = ContextCompat.checkSelfPermission(getApplicationContext(), WRITE_EXTERNAL_STORAGE);
            return readCheck == PackageManager.PERMISSION_GRANTED && writeCheck == PackageManager.PERMISSION_GRANTED;
        }
    }
    private String[] permissions = {READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE};
    private void requestPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            new AlertDialog.Builder(ChoiceActivity.this)
                    .setTitle("Permission")
                    .setMessage("Please give the Storage permission")
                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
                        public void onClick( DialogInterface dialog, int which ) {
                            try {
                                Intent intent = new Intent(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);
                                intent.addCategory("android.intent.category.DEFAULT");
                                intent.setData(Uri.parse(String.format("package:%s", new Object[]{getApplicationContext().getPackageName()})));
                                activityResultLauncher.launch(intent);
                            } catch (Exception e) {
                                Intent intent = new Intent();
                                intent.setAction(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);
                                activityResultLauncher.launch(intent);
                            }
                        }
                    })
                    .setCancelable(false)
                    .show();

        } else {

            ActivityCompat.requestPermissions(ChoiceActivity.this, permissions, 30);
        }
    }


    @Override
    protected void onResume() {
        super.onResume();
        if (dark) {
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);
        } else {
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);
        }
    }

    public void navbtnClicked(View view) {
        // If the navigation drawer is not open then open it, if its already open then close it.
        if(!layout.isDrawerOpen(GravityCompat.START)) layout.openDrawer(GravityCompat.START);
        else layout.closeDrawer(GravityCompat.END);
    }
    private void enableSwipeToDeleteAndUndo() {
        SwipeToDeleteCallback swipeToDeleteCallback = new SwipeToDeleteCallback(this) {
            @Override
            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int i) {


                final int position = viewHolder.getAdapterPosition();
                final RecentAppsHelper item = adapter.getData().get(position);

                adapter.removeItem(position);


                Snackbar snackbar = Snackbar
                        .make(mainLayoutRecyclerview, "Item was removed from the list.", Snackbar.LENGTH_LONG);
                snackbar.setAction("UNDO", new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        adapter.restoreItem(item, position);
                        mRecentAppsRecyclerview.scrollToPosition(position);
                    }
                });

                snackbar.setActionTextColor(Color.YELLOW);
                snackbar.show();

            }
        };

        ItemTouchHelper itemTouchhelper = new ItemTouchHelper(swipeToDeleteCallback);
        itemTouchhelper.attachToRecyclerView(mRecentAppsRecyclerview);
    }
}