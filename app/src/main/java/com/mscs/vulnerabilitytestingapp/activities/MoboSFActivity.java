package com.mscs.vulnerabilitytestingapp.activities;

import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import com.androidnetworking.AndroidNetworking;
import com.androidnetworking.common.Priority;
import com.androidnetworking.error.ANError;
import com.androidnetworking.interfaces.JSONObjectRequestListener;
import com.androidnetworking.interfaces.UploadProgressListener;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.mscs.vulnerabilitytestingapp.Constants;
import com.mscs.vulnerabilitytestingapp.R;
import com.mscs.vulnerabilitytestingapp.helperclasses.AppListAdapter;
import com.mscs.vulnerabilitytestingapp.helperclasses.FileUploadService;
import com.mscs.vulnerabilitytestingapp.helperclasses.Preferences;

import org.json.JSONException;
import org.json.JSONObject;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class MoboSFActivity extends AppCompatActivity {

    TextView textView;
    int percentage = 0;
    ProgressDialog dialog;

    TextView appName, hashText, analyzerText, uploadStatus, appType, appTitle;
    MaterialButton scanBtn;
    JSONObject responseJson;
    MaterialCardView cardView;

    Path apkPath ;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_mobo_sfactivity);

        appName = findViewById(R.id.appnametextview);
        hashText = findViewById(R.id.hashTextView);
        analyzerText = findViewById(R.id.analyzertextview);
        uploadStatus = findViewById(R.id.statustextview);
        appType = findViewById(R.id.apptypetextview);
        scanBtn = findViewById(R.id.scanAppBtn);
        cardView = findViewById(R.id.textsLayout);
        appTitle = findViewById(R.id.apptitle);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            apkPath = Paths.get(getIntent().getStringExtra("url"));
        } else {
            apkPath = AppListAdapter.apkPath;
        }
        scanBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            Preferences preferences = new Preferences(MoboSFActivity.this);
                            AndroidNetworking.post( preferences.getHttp()+ Constants.SCAN)
                                    .addHeaders(Constants.AUTH_STRING, preferences.getAuthKey())
                                    .addBodyParameter("scan_type", responseJson.getString("scan_type"))
                                    .addBodyParameter("file_name", responseJson.getString("file_name"))
                                    .addBodyParameter("hash", responseJson.getString("hash"))
                                    .addBodyParameter("re_scan", "0")
                                    .setPriority(Priority.HIGH)
                                    .build().getAsJSONObject(new JSONObjectRequestListener() {
                                        @Override
                                        public void onResponse(JSONObject response) {
                                            Log.e("Scan", "Scan Response: " + response);
                                            Toast.makeText(MoboSFActivity.this, "App is Uploaded successfully and pushed to Scan!", Toast.LENGTH_SHORT).show();
                                            startActivity(new Intent(getApplicationContext(), ChoiceActivity.class));
                                            finishAffinity();
                                        }

                                        @Override
                                        public void onError(ANError anError) {
                                            Log.e("Scan", "Scan Response: " + anError.getErrorCode());
                                            finish();
                                        }
                                    });
                        } catch (JSONException e) {
                            throw new RuntimeException(e);
                        }
                    }
                });
            }
        });

        File file;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            file = new File(String.valueOf(AppListAdapter.apkPath.toFile()));
        } else {
            file = new File(String.valueOf(AppListAdapter.apkPath));
        }

        uploadFile(file);
    }

    void setText(JSONObject response) throws JSONException {
        appName.setText("App Name: "+response.getString("file_name"));
        appTitle.setText(response.getString("file_name"));
        analyzerText.setText("Analyzer Type: " + response.getString("analyzer"));
        uploadStatus.setText("Upload Status: " +response.getString("status"));
        hashText.setText("Hash: " +response.getString("hash"));
        appType.setText("App Type: " +response.getString("scan_type"));
        scanBtn.setEnabled(true);
        cardView.setVisibility(View.VISIBLE);

    }

    public void backPressed(View view) {
        super.onBackPressed();
    }


    private void uploadFile(File file) {
        long maxFileSizeInBytes = 256 * 1024 * 1024; // 256 MB

        // Check if the file size is within the server's limit
        if (file.length() > maxFileSizeInBytes) {

            Toast.makeText(this, "App size is Bigger!!!", Toast.LENGTH_SHORT).show();
            finish();
        } else {
            // The file size is within the server's limit, proceed with the upload as before.

            ProgressDialog dialog = new ProgressDialog(this);
            dialog.setMessage("Uploading...");
            dialog.setCancelable(false);
            dialog.setIndeterminate(true);
            dialog.show();

            Preferences preferences = new Preferences(this);
            // Create OkHttpClient to add headers
            OkHttpClient.Builder httpClient = new OkHttpClient.Builder();
            httpClient.addInterceptor(chain -> {
                okhttp3.Request original = chain.request();
                okhttp3.Request request = original.newBuilder()
                        .header(Constants.AUTH_STRING, preferences.getAuthKey())
                        .method(original.method(), original.body())
                        .build();
                return chain.proceed(request);
            });
            // Create Retrofit instance with OkHttpClient that includes headers
            Retrofit retrofit = new Retrofit.Builder()
                    .baseUrl(preferences.getAuthKey())
                    .addConverterFactory(GsonConverterFactory.create())
                    .client(httpClient.build())
                    .build();

            FileUploadService fileUploadService = retrofit.create(FileUploadService.class);

            // Create request body from file
            RequestBody requestFile = RequestBody.create(MediaType.parse("application/octet-stream"), file);

            // Create multipart request body
            MultipartBody.Part body = MultipartBody.Part.createFormData("file", file.getName(), requestFile);

            // Make the call
            Call<ResponseBody> call = fileUploadService.uploadFile(body);
            // Perform the request
            call.enqueue(new Callback<ResponseBody>() {
                @Override
                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                    dialog.dismiss();
                    if (response.isSuccessful()) {
                        try {
                            String responseData = response.body().string();
                            JSONObject jsonObject = new JSONObject(responseData);
                            responseJson = jsonObject;
                            setText(jsonObject);
                            dialog.dismiss();
                        } catch (IOException | JSONException e) {
                            Log.e("TextError", "onResponse: " + e.getMessage());
                            dialog.dismiss();

                        }
                    } else {
                        try {
                            Log.e("fileupload", "onResponse: " + response.errorBody().string());
                            dialog.dismiss();
                        } catch (IOException e) {
                            throw new RuntimeException(e);
                        }

                    }
                }

                @Override
                public void onFailure(Call<ResponseBody> call, Throwable t) {
                    dialog.dismiss();
                    Log.e("fileupload", "onFailure: " + t.getMessage());

                }
            });

        }


    }

}
